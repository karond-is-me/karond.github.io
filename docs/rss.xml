<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>karond</title><link>https://karond-is-me.github.io/karond.github.io</link><description>拒绝花里胡哨</description><copyright>karond</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://karond-is-me.github.io/karond.github.io</link></image><lastBuildDate>Wed, 17 Apr 2024 13:50:37 +0000</lastBuildDate><managingEditor>karond</managingEditor><ttl>60</ttl><webMaster>karond</webMaster><item><title>Rust：让Python再次伟大！使用PyO3创建Python模块</title><link>https://karond-is-me.github.io/karond.github.io/post/Rust%EF%BC%9A-rang-Python-zai-ci-wei-da-%EF%BC%81-shi-yong-PyO3-chuang-jian-Python-mo-kuai.html</link><description>本篇中你将看到：&#13;
- 从零使用PyO3创建一个Python模块&#13;
&#13;
&#13;
# Round1 使用PyO3创建第一个Rust语言的Python模块&#13;
## 准备工作&#13;
首先要安装Python和Rust，PyO3官方的版本要求是：&#13;
- Python 3.7 and up (CPython, PyPy, and GraalPy)&#13;
- Rust 1.56 and up&#13;
&#13;
我在本机安装的基本是最新版本&#13;
```bash&#13;
(base) karond:~/code/rust/mypym$ python --version&#13;
Python 3.12.1&#13;
(base) karond:~/code/rust/mypym$ pip --version&#13;
pip 23.3.1 from /home/karond/.miniconda3/lib/python3.12/site-packages/pip (python 3.12)&#13;
(base) karond:~/code/rust/mypym$ rustc --version&#13;
rustc 1.77.2 (25ef9e3d8 2024-04-09)&#13;
(base) karond:~/code/rust/mypym$ cargo --version&#13;
cargo 1.77.2 (e52e36006 2024-03-26)&#13;
```&#13;
## 创建一个项目&#13;
先不要急于使用cargo创建一个项目，我们创建的项目最终是要生成一个可以使用pip安装的Python模块，而生成模块可以使用setuptools和maturin，官方推荐maturin因此我们使用pip安装maturin并创建项目，需要选择pyo3项目&#13;
```bash&#13;
(base) karond:~/code/rust/mypym$ pip install maturin&#13;
Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple&#13;
Collecting maturin&#13;
  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/d2/e0/886abd982f4dc1031cc947909e75e9bbbb4c2d76f5ffd23a7236784135af/maturin-1.5.1-py3-none-manylinux_2_12_x86_64.manylinux2010_x86_64.musllinux_1_1_x86_64.whl (10.3 MB)&#13;
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 10.3/10.3 MB 2.7 MB/s eta 0:00:00&#13;
Installing collected packages: maturin&#13;
Successfully installed maturin-1.5.1&#13;
(base) karond:~/code/rust/mypym$ maturin init&#13;
? 🤷 Which kind of bindings to use?&#13;
  📖 Documentation: https://maturin.rs/bindings.html ›&#13;
❯ pyo3&#13;
  rust-cpython&#13;
  cffi&#13;
  uniffi&#13;
  bin&#13;
```&#13;
可以看到生成的项目里有一段实例代码，作用就是创建一个模块模块下面存在一个函数，是让两个数相加并返回结果的字符串&#13;
```rust&#13;
use pyo3::prelude::*;&#13;
&#13;
/// Formats the sum of two numbers as string.&#13;
#[pyfunction]&#13;
fn sum_as_string(a: usize, b: usize) -&gt; PyResult&lt;String&gt; {&#13;
    Ok((a + b).to_string())&#13;
}&#13;
&#13;
/// A Python module implemented in Rust.&#13;
#[pymodule]&#13;
fn mypym(_py: Python, m: &amp;PyModule) -&gt; PyResult&lt;()&gt; {&#13;
    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;&#13;
    Ok(())&#13;
}&#13;
```&#13;
## 构建模块&#13;
使用`maturin build --release`命令构建模块，经过漫长的输出以后最终的输出指出构建好的模块保存在target/wheels文件夹下，模块大小仅有225KB&#13;
```bash&#13;
karond:~/code/rust/mypym$ maturin build --release&#13;
  Downloaded bitflags v1.3.2 (registry `rsproxy-sparse`)&#13;
  Downloaded redox_syscall v0.4.1 (registry `rsproxy-sparse`)&#13;
...&#13;
   Compiling mypym v0.1.0 (/home/karond/code/rust/mypym)&#13;
    Finished release [optimized] target(s) in 23.61s&#13;
📦 Built wheel for CPython 3.12 to /home/karond/code/rust/mypym/target/wheels/mypym-0.1.0-cp312-cp312-manylinux_2_34_x86_64.whl&#13;
&#13;
karond:~/code/rust/mypym$ ls -lh /home/karond/code/rust/mypym/target/wheels/mypym-0.1.0-cp312-cp312-manylinux_2_34_x86_64.whl&#13;
-rw-r--r-- 1 karond karond 225K Apr 17 21:38 /home/karond/code/rust/mypym/target/wheels/mypym-0.1.0-cp312-cp312-manylinux_2_34_x86_64.whl&#13;
```&#13;
&#13;
我们就可以使用pip安装这个模块试一试&#13;
```bash&#13;
(base) karond:~/code/rust/mypym$ pip install target/wheels/mypym-0.1.0-cp312-cp312-manylinux_2_34_x86_64.whl&#13;
Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple&#13;
Processing ./target/wheels/mypym-0.1.0-cp312-cp312-manylinux_2_34_x86_64.whl&#13;
Installing collected packages: mypym&#13;
Successfully installed mypym-0.1.0&#13;
(base) karond:~/code/rust/mypym$ python&#13;
Python 3.12.1 | packaged by Anaconda, Inc. | (main, Jan 19 2024, 15:51:05) [GCC 11.2.0] on linux&#13;
Type "help", "copyright", "credits" or "license" for more information.&#13;
&gt;&gt;&gt; import mypym&#13;
&gt;&gt;&gt; mypym.&#13;
mypym.mypym           mypym.sum_as_string(&#13;
&gt;&gt;&gt; mypym.sum_as_string(1234,4321)&#13;
'5555'&#13;
```&#13;
## 总结&#13;
创建第一Rust语言的Python模块就是这么简单。</description><guid isPermaLink="true">https://karond-is-me.github.io/karond.github.io/post/Rust%EF%BC%9A-rang-Python-zai-ci-wei-da-%EF%BC%81-shi-yong-PyO3-chuang-jian-Python-mo-kuai.html</guid><pubDate>Wed, 17 Apr 2024 13:27:37 +0000</pubDate></item><item><title>解决rustup安装和更新Rust过慢的问题</title><link>https://karond-is-me.github.io/karond.github.io/post/jie-jue-rustup-an-zhuang-he-geng-xin-Rust-guo-man-de-wen-ti.html</link><description>国内连接默认的镜像速度过慢，建议安装过的没安装过的都设置一次！！&#13;
步骤一：设置 Rustup 镜像， 修改配置 ~/.zshrc or ~/.bashrc&#13;
``` bash&#13;
export RUSTUP_DIST_SERVER="https://rsproxy.cn"&#13;
export RUSTUP_UPDATE_ROOT="https://rsproxy.cn/rustup"&#13;
```&#13;
步骤二：安装 Rust 或更新Rust&#13;
``` bash&#13;
#安装&#13;
curl --proto '=https' --tlsv1.2 -sSf https://rsproxy.cn/rustup-init.sh | sh&#13;
#更新&#13;
rustup self update&#13;
rustup update stable&#13;
```&#13;
步骤三：设置 crates.io 镜像， 修改配置 ~/.cargo/config，已支持git协议和sparse协议，&gt;=1.68 版本建议使用 sparse-index，速度更快。</description><guid isPermaLink="true">https://karond-is-me.github.io/karond.github.io/post/jie-jue-rustup-an-zhuang-he-geng-xin-Rust-guo-man-de-wen-ti.html</guid><pubDate>Thu, 04 Apr 2024 13:35:44 +0000</pubDate></item><item><title>我再测试一次</title><link>https://karond-is-me.github.io/karond.github.io/post/wo-zai-ce-shi-yi-ci.html</link><description>测试过啊。</description><guid isPermaLink="true">https://karond-is-me.github.io/karond.github.io/post/wo-zai-ce-shi-yi-ci.html</guid><pubDate>Sun, 31 Mar 2024 12:31:14 +0000</pubDate></item><item><title>测试啊</title><link>https://karond-is-me.github.io/karond.github.io/post/ce-shi-a.html</link><description>测试。</description><guid isPermaLink="true">https://karond-is-me.github.io/karond.github.io/post/ce-shi-a.html</guid><pubDate>Sun, 31 Mar 2024 05:34:14 +0000</pubDate></item></channel></rss>